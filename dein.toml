[[plugins]]
repo = "machakann/vim-sandwich"

[[plugins]]
repo = "cohama/lexima.vim"

[[plugins]]
repo = "SirVer/ultisnips"

[[plugins]]
repo = "hrsh7th/nvim-cmp"
depends = [
  "neovim/nvim-lspconfig",
  "hrsh7th/cmp-nvim-lsp",
  "hrsh7th/cmp-buffer",
  "hrsh7th/cmp-path",
  "hrsh7th/cmp-cmdline",
]
hook_add = '''
set completeopt=menu,menuone,noselect
lua <<EOF
  -- Set up nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    window = {
      completion = cmp.config.window.bordered(),
      documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Set up lspconfig.
  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  local lspconfig = require('lspconfig')
  require('mason-lspconfig').setup_handlers {
    function(server_name)
      lspconfig[server_name].setup {
        capabilities = capabilities,
      }
    end,
  }
EOF
'''

[[plugins]]
repo = "neovim/nvim-lspconfig"

[[plugins]]
repo = "hrsh7th/cmp-nvim-lsp"

[[plugins]]
repo = "hrsh7th/cmp-buffer"

[[plugins]]
repo = "hrsh7th/cmp-path"

[[plugins]]
repo = "hrsh7th/cmp-cmdline"

[[plugins]]
repo = "williamboman/mason.nvim"
hook_add = '''
lua <<EOF
  require("mason").setup()
EOF
'''
[[plugins]]
repo = "williamboman/mason-lspconfig.nvim"

[[plugins]]
repo = "bluz71/vim-nightfly-guicolors"
hook_add = '''
let g:lightline = { 'colorscheme': 'nightfly' }
let g:nightflyCursorColor = v:true
let g:nightflyNormalFloat = v:true
let g:nightflyWinSeparator = 2
let g:nightflyUnderlineMatchParen = v:true
'''

[[plugins]]
repo = "nvim-lualine/lualine.nvim"
hook_add = '''
lua <<EOF
  require('lualine').setup{
    options = {
      globalstatus = true
    }
  }
EOF
'''

[[plugins]]
repo = "numToStr/Comment.nvim"
hook_add = '''
lua <<EOF
  require('Comment').setup()
EOF
'''

[[plugins]]
repo = "phaazon/hop.nvim"
hook_add = '''
lua <<EOF
  local hop = require('hop')
  local directions = require('hop.hint').HintDirection
  vim.keymap.set('', 'f', function()
    hop.hint_char1({ direction = directions.AFTER_CURSOR, current_line_only = true })
  end, {remap=true})
  vim.keymap.set('', 'F', function()
    hop.hint_char1({ direction = directions.BEFORE_CURSOR, current_line_only = true })
  end, {remap=true})
  vim.keymap.set('', 't', function()
    hop.hint_char1({ direction = directions.AFTER_CURSOR, current_line_only = true, hint_offset = -1 })
  end, {remap=true})
  vim.keymap.set('', 'T', function()
    hop.hint_char1({ direction = directions.BEFORE_CURSOR, current_line_only = true, hint_offset = 1 })
  end, {remap=true})
  require('hop').setup()
EOF
'''

[[plugins]]
repo = "nvim-lua/plenary.nvim"

[[plugins]]
repo = "kdheepak/lazygit.nvim"

[[plugins]]
repo = "Shougo/vimproc.vim"
build = "make"

[[plugins]]
repo = "akinsho/toggleterm.nvim"
hook_add = '''
" set
autocmd TermEnter term://*toggleterm#*
      \ tnoremap <silent><c-t> <Cmd>exe v:count1 . "ToggleTerm"<CR>

" By applying the mappings this way you can pass a count to your
" mapping to open a specific window.
" For example: 2<C-t> will open terminal 2
nnoremap <silent><c-t> <Cmd>exe v:count1 . "ToggleTerm"<CR>
inoremap <silent><c-t> <Esc><Cmd>exe v:count1 . "ToggleTerm"<CR>
lua <<EOF
  require('toggleterm').setup()
EOF
'''

[[plugins]]
repo = "nvim-telescope/telescope.nvim"
rev = '0.1.0'
hook_add = '''
nnoremap <silent><c-p> :Telescope find_files<CR>
lua <<EOF
  require('telescope').setup()
EOF
'''
